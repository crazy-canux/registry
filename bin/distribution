#!/usr/bin/env python3

import os
import sys
import logging
from logging.handlers import WatchedFileHandler

import gunicorn.app.base
from uvicorn.workers import UvicornWorker

from applianced.registry import app


logger = logging.getLogger()
logger.setLevel(logging.DEBUG)


class RegistryApp(gunicorn.app.base.BaseApplication):
    def __init__(self, application, options):
        self.app = application
        self.options = options
        super().__init__()

    def init(self):
        pass

    def load_config(self):
        config = {
            key: value
            for key, value in self.options.items()
            if key in self.cfg.settings and value is not None
        }
        for key, value in config.items():
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.app


if __name__ == "__main__":
    logs_dir = "/var/log/appliance"
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)
    log_path = os.path.join(logs_dir, "registry.log")
    formatter = logging.Formatter(
        "%(asctime)s [%(name)s] %(levelname)s: %(message)s"
    )

    file = WatchedFileHandler(log_path)
    file.setLevel(logging.DEBUG)
    file.setFormatter(formatter)
    logger.addHandler(file)

    console = logging.StreamHandler(sys.stdout)
    console.setLevel(logging.INFO)
    console.setFormatter(formatter)
    logger.addHandler(console)

    logger.info("Starting registry...")
    options = {
        'bind': '0.0.0.0:8080',
        "workers": 2,
        "worker-class": UvicornWorker,
        "log-level": "debug"
    }
    RegistryApp(app, options).run()

